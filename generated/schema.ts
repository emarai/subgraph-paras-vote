// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("proposer", Value.fromString(""));
    this.set("kind", Value.fromString(""));
    this.set("status", Value.fromString(""));
    this.set("submission_time", Value.fromBigInt(BigInt.zero()));
    this.set("proposal_start_time", Value.fromBigInt(BigInt.zero()));
    this.set("proposal_period", Value.fromBigInt(BigInt.zero()));
    this.set("log", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Proposal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    return value!.toString();
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get kind(): string {
    let value = this.get("kind");
    return value!.toString();
  }

  set kind(value: string) {
    this.set("kind", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get submission_time(): BigInt {
    let value = this.get("submission_time");
    return value!.toBigInt();
  }

  set submission_time(value: BigInt) {
    this.set("submission_time", Value.fromBigInt(value));
  }

  get proposal_start_time(): BigInt {
    let value = this.get("proposal_start_time");
    return value!.toBigInt();
  }

  set proposal_start_time(value: BigInt) {
    this.set("proposal_start_time", Value.fromBigInt(value));
  }

  get proposal_period(): BigInt {
    let value = this.get("proposal_period");
    return value!.toBigInt();
  }

  set proposal_period(value: BigInt) {
    this.set("proposal_period", Value.fromBigInt(value));
  }

  get log(): Array<string> {
    let value = this.get("log");
    return value!.toStringArray();
  }

  set log(value: Array<string>) {
    this.set("log", Value.fromStringArray(value));
  }
}

export class Log extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("standard", Value.fromString(""));
    this.set("version", Value.fromString(""));
    this.set("event", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Log entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Log entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Log", id.toString(), this);
    }
  }

  static load(id: string): Log | null {
    return changetype<Log | null>(store.get("Log", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get standard(): string {
    let value = this.get("standard");
    return value!.toString();
  }

  set standard(value: string) {
    this.set("standard", Value.fromString(value));
  }

  get version(): string {
    let value = this.get("version");
    return value!.toString();
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get proposal_id(): string | null {
    let value = this.get("proposal_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposal_id(value: string | null) {
    if (!value) {
      this.unset("proposal_id");
    } else {
      this.set("proposal_id", Value.fromString(<string>value));
    }
  }

  get vote_option(): string | null {
    let value = this.get("vote_option");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vote_option(value: string | null) {
    if (!value) {
      this.unset("vote_option");
    } else {
      this.set("vote_option", Value.fromString(<string>value));
    }
  }

  get user_weight(): string | null {
    let value = this.get("user_weight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user_weight(value: string | null) {
    if (!value) {
      this.unset("user_weight");
    } else {
      this.set("user_weight", Value.fromString(<string>value));
    }
  }

  get proposer(): string | null {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposer(value: string | null) {
    if (!value) {
      this.unset("proposer");
    } else {
      this.set("proposer", Value.fromString(<string>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get kind(): string | null {
    let value = this.get("kind");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set kind(value: string | null) {
    if (!value) {
      this.unset("kind");
    } else {
      this.set("kind", Value.fromString(<string>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get submission_time(): string | null {
    let value = this.get("submission_time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set submission_time(value: string | null) {
    if (!value) {
      this.unset("submission_time");
    } else {
      this.set("submission_time", Value.fromString(<string>value));
    }
  }

  get proposal_start_time(): string | null {
    let value = this.get("proposal_start_time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposal_start_time(value: string | null) {
    if (!value) {
      this.unset("proposal_start_time");
    } else {
      this.set("proposal_start_time", Value.fromString(<string>value));
    }
  }

  get proposal_period(): string | null {
    let value = this.get("proposal_period");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposal_period(value: string | null) {
    if (!value) {
      this.unset("proposal_period");
    } else {
      this.set("proposal_period", Value.fromString(<string>value));
    }
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("vote_option", Value.fromString(""));
    this.set("user_weight", Value.fromBigInt(BigInt.zero()));
    this.set("log", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vote_option(): string {
    let value = this.get("vote_option");
    return value!.toString();
  }

  set vote_option(value: string) {
    this.set("vote_option", Value.fromString(value));
  }

  get user_weight(): BigInt {
    let value = this.get("user_weight");
    return value!.toBigInt();
  }

  set user_weight(value: BigInt) {
    this.set("user_weight", Value.fromBigInt(value));
  }

  get log(): Array<string> {
    let value = this.get("log");
    return value!.toStringArray();
  }

  set log(value: Array<string>) {
    this.set("log", Value.fromStringArray(value));
  }
}
